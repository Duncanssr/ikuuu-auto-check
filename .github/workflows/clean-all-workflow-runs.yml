name: 每月全量清理工作流记录

on:
  schedule:
    - cron: '0 0 1 * *'  # 每月1日UTC 0点自动执行
  workflow_dispatch:      # 支持手动触发

jobs:
  clean-all-runs:
    runs-on: ubuntu-latest
    permissions:
      actions: write      # 必需：删除工作流记录的权限
      contents: read      # 辅助：确保仓库访问权限
    env:
      REPO: ${{ github.repository }}          # 自动获取仓库（用户名/仓库名）
      CURRENT_RUN_ID: ${{ github.run_id }}    # 当前清理任务ID（避免删除自身）
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}# 自动注入的仓库令牌（无需手动配置）

    steps:
      - name: 安装/验证 GitHub CLI（gh）
        run: |
          # 安装curl（若未安装）
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          # 添加gh官方源并安装
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
          # 验证gh版本（仅输出信息，不判断授权状态）
          gh --version
          echo "✅ GitHub CLI 安装完成，将使用 GITHUB_TOKEN 自动授权"

      - name: 全量清理所有工作流记录（含自身历史记录）
        run: |
          echo "📦 开始清理仓库 $REPO 的工作流记录（当前清理任务ID：$CURRENT_RUN_ID）"
          
          # 1. 获取所有工作流ID（包括清理工作流自身）
          echo -e "\n🔍 获取所有工作流ID..."
          WORKFLOW_IDS=$(gh api -X GET /repos/$REPO/actions/workflows \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" | jq -r '.workflows[] | .id')
          
          # 检查是否获取到工作流ID
          if [ -z "$WORKFLOW_IDS" ] || [ "$WORKFLOW_IDS" = "null" ]; then
            echo "⚠️ 未获取到任何工作流ID，可能无权限或仓库无工作流"
            exit 0  # 无工作流时正常退出，不视为失败
          fi
          
          # 2. 遍历每个工作流，删除所有历史记录（排除当前运行的清理任务）
          for WORKFLOW_ID in $WORKFLOW_IDS; do
            echo -e "\n=== 🔄 处理工作流 ID: $WORKFLOW_ID ==="
            PAGE=1
            while true; do
              # 分页获取当前工作流的记录（每页100条，最多支持）
              echo -n "📄 获取第 $PAGE 页记录..."
              RUNS_RESPONSE=$(gh api -X GET "/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?page=$PAGE&per_page=100" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json")
              
              # 提取需删除的记录ID（排除当前清理任务ID）
              RUNS=$(echo "$RUNS_RESPONSE" | jq -r --arg CURRENT_ID "$CURRENT_RUN_ID" \
                '.workflow_runs[] | select(.id != $CURRENT_ID) | .id')
              
              # 无记录时退出当前工作流的循环
              if [ -z "$RUNS" ] || [ "$RUNS" = "null" ]; then
                echo " 无更多记录，当前工作流处理完成"
                break
              fi
              
              # 3. 逐个删除记录（带3次重试，避免偶发错误）
              echo " 共找到 $(echo "$RUNS" | wc -l) 条待删除记录"
              for RUN_ID in $RUNS; do
                echo -n "🗑️ 删除记录 ID: $RUN_ID ... "
                RETRY=0
                MAX_RETRY=3
                DELETE_SUCCESS=0
                
                while [ $RETRY -lt $MAX_RETRY ]; do
                  # 尝试删除记录
                  DELETE_OUTPUT=$(gh api -X DELETE "/repos/$REPO/actions/runs/$RUN_ID" \
                    -H "Authorization: Bearer $GITHUB_TOKEN" \
                    -H "Accept: application/vnd.github.v3+json" 2>&1)
                  DELETE_EXIT_CODE=$?
                  
                  # 成功：标记并退出重试
                  if [ $DELETE_EXIT_CODE -eq 0 ]; then
                    echo "✅ 成功"
                    DELETE_SUCCESS=1
                    break
                  # 失败：重试（间隔2秒）
                  else
                    RETRY=$((RETRY + 1))
                    if [ $RETRY -lt $MAX_RETRY ]; then
                      echo -n "❌ 失败（重试 $RETRY/$MAX_RETRY），2秒后重试... "
                      sleep 2
                    # 多次失败：记录错误并跳过
                    else
                      echo -e "❌ 失败（已重试$MAX_RETRY次），错误：\n$DELETE_OUTPUT"
                    fi
                  fi
                done
              done
              
              # 进入下一页，控制频率避免API限制
              PAGE=$((PAGE + 1))
              sleep 1
            done
          done
          
          echo -e "\n🎉 所有可处理的工作流记录已完成清理"
